'''
Created on 28 Mar 2019

@author: andraspalfi
'''


class BiquadFilter:
    """ class BiquadFilter

    This class implements a simple biquad filter object

    Biquad filtering is implemented both in Direct Form II and
    Transposed Direct Form II

    Coefficients are expected as an array of 6 floats, in the usual SOS format
    The coefficients don't have to be normalized to a0, but also not forbidden
    """

    def __init__(self, b0=1.0, b1=0.0, b2=0.0, a0=1.0, a1=0.0, a2=0.0):
        """__init__(self, b0, b1, b2, a0, a1, a2):

        This method acts as the constructor for the BiquadFilter class

        Coefficients are expected as an array of 6 floats, in the usual SOS format
        The coefficients don't have to be normalized to a0, but also not forbidden

        Parameters:
        -----------
        b0, b1, b2, a0, a1, a2: float
            biquad coefficients (b0-b2: feedforward, a0-a2: feedback)
            Default values are pass-thru filter coeffs
            (b0 and a0 = 1.0, all others 0.0)
        """
        # set coefficients
        self.set_coeffs(b0, b1, b2, a0, a1, a2)

        # internal delay registers
        self.w1 = 0.0
        self.w2 = 0.0

    def set_coeffs(self, b0, b1, b2, a0, a1, a2):
        """set_coeffs(self, b0, b1, b2, a0, a1, a2):

        This method sets the coefficients of the biquad filter.

        Coefficients are expected as an array of 6 floats, in the usual SOS format
        The coefficients don't have to be normalized to a0, but also not forbidden

        Parameters:
        -----------
        b0, b1, b2, a0, a1, a2: float
            biquad coefficients (b0-b2: feedforward, a0-a2: feedback)
        """
        # normalizing coeffs:
        ax = 1.0 / a0

        self.b0 = b0 * ax
        self.b1 = b1 * ax
        self.b2 = b2 * ax
        self.a0 = 1.0
        self.a1 = a1 * ax
        self.a2 = a2 * ax

    def process_d2(self, x):
        """process_d2(self, x):

        Performs biquad filtering for 1 sample of input signal
        Implementation: Direct Form II

        Parameters:
        -----------
        x: float
            input sample

        Returns:
        ________
        y: float
            output sample
        """
        # difference equation
        w = x - self.a1 * self.w1 - self.a2 * self.w2
        y = self.b0 * w + self.b1 * self.w1 + self.b2 * self.w2

        # delay registers
        self.w2 = self.w1
        self.w1 = w

        return y

    def process_td2(self, x):
        """process_td2(self, x):

        Performs biquad filtering for 1 sample of input signal
        Implementation: Transposed Direct Form II

        Parameters:
        -----------
        x: float
            input sample

        Returns:
        ________
        y: float
            output sample
        """
        # difference equation
        y = self.b0 * x + self.w1
        self.w1 = self.w2 + self.b1 * x - self.a1 * y
        self.w2 = self.b2 * x - self.a2 * y

        return y


if __name__ == '__main__':
    import numpy as np
    from dafx_audio_io import read_audio, write_audio

    # %% -- Demonstrating biquad object by simple filtering

    # input signal -  read in wav file
    infile_name = 'whitenoise_5s'  # 'clean_guitar_melody' 'whitenoise_5s'  'clean_funky_lick_90bpm' 'clean_pop_strum_100bpm'
    outfile_name = infile_name + '_biquad'

    infile_path = '../../input_audio/' + infile_name + '.wav'
    (fs, x) = read_audio(infile_path)
    leng_samp = x.__len__()
    t_ax = np.r_[0: (leng_samp) / fs: 1 / fs]
    y = np.zeros(x.__len__())

    # DUMMY BIQUAD COEFFICIENTS, HANDLE WITH CARE
    # Generated by mkbiquad.m, parameters:
    # fs = 44100;
    # param.f0 = 1000;
    # param.Q_db = 0;
    # param.gain_db = 0;
    # param.boost_db = 0;
    # param.type = 'butter_lp';
    b0 = 0.005066263610029
    b1 = 0.010132527220058
    b2 = 0.005066263610029
    a0 = 1.100405145117797
    a1 = -1.979734945559883
    a2 = 0.899594854882203

    # Instantiate filter object
    bQF = BiquadFilter(b0, b1, b2, a0, a1, a2)

    # Run filter
    for i, xn in enumerate(t_ax):
        y[i] = bQF.process_td2(x[i])

    outfile_path = '../../output_audio/biquad/' + outfile_name + '.wav'
    write_audio(y, fs, outfile_path)
